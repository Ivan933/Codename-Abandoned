<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="user-scalable=no, initial-scale=1.0, width=device-width, viewport-fit=cover">
    <title>Codename: Abandoned</title>

    <!-- Libraries -->
    <script src="lib/tdvplayer.js"></script>
    <script src="lib/ThreeWebGL.js"></script>
    <script src="script.js?v=1738683456665"></script>

    <style>
        /* Fullscreen fixes */
        :fullscreen #viewer {
            width: 100% !important;
            height: 100% !important;
        }

        /* Panorama Viewer fixes */
        #viewer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
            background: #000;
        }

        /* AI Ghost NPC positioning */
        #ghost-npc {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            cursor: pointer;
            opacity: 0.8;
            z-index: 10000;
            pointer-events: auto;
        }

        /* Fullscreen button styling */
        .fullscreen-button {
            position: fixed;
            bottom: 20px;
            left: 20px;
            padding: 10px;
            background: rgba(0,0,0,0.5);
            color: white;
            border: 1px solid white;
            cursor: pointer;
            z-index: 10000;
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div id="preloadContainer">
        <img id="eyeAnimation" src="loading/HTMLImage_D852ACBA_C9D9_4C69_41C0_1FC9A930EF8A.gif" alt="Access Pending">
        <button id="wallet-button">Initialize Wallet Protocol</button>
    </div>

    <!-- Virtual Tour Viewer -->
    <div id="viewer"></div>

    <!-- AI Ghost NPC -->
    <img id="ghost-npc" src="ghost.png" width="100" alt="Ghost NPC" style="display: none;">
    <div id="ghost-dialogue-box">
        <p id="ghost-dialogue">...</p>
    </div>

    <script>
        // Fullscreen handling
        function handleFullScreen() {
            const viewer = document.getElementById("viewer");
            if (viewer.requestFullscreen) {
                viewer.requestFullscreen();
            } else if (viewer.mozRequestFullScreen) {
                viewer.mozRequestFullScreen();
            } else if (viewer.webkitRequestFullscreen) {
                viewer.webkitRequestFullscreen();
            } else if (viewer.msRequestFullscreen) {
                viewer.msRequestFullscreen();
            }

            // Refresh panorama after fullscreen change
            setTimeout(() => {
                if (player && player.setSize) {
                    player.setSize(window.innerWidth, window.innerHeight);
                }
            }, 100);
        }

        // Initialize tour with proper fullscreen handling
        function initializeTour() {
            if (isInitialized) return;
            
            try {
                const settings = new TDV.PlayerSettings();
                settings.set(TDV.PlayerSettings.CONTAINER, document.getElementById('viewer'));
                settings.set(TDV.PlayerSettings.SCRIPT_URL, 'script.js?v=1738683456665');
                settings.set(TDV.PlayerSettings.THREE_JS_WEBGL_URL, 'lib/ThreeWebGL.js');

                window.tdvplayer = player = TDV.PlayerAPI.create(settings);
                isInitialized = true;

                // Add fullscreen button handler
                player.bind('click', (event) => {
                    if (event.targetType === 'fullscreen') {
                        handleFullScreen();
                    }
                });

                // Show ghost NPC after tour loads
                player.bind('stateChange', (event) => {
                    if (event.name === 'begin') {
                        document.getElementById("ghost-npc").style.display = "block";
                    }
                });

            } catch (error) {
                console.error('TDV Initialization Error:', error);
                alert('Virtual environment failed to initialize');
            }
        }

        // Improved AI interaction
        async function interactWithGhost() {
            try {
                const dialogueBox = document.getElementById("ghost-dialogue-box");
                dialogueBox.style.display = "block";
                dialogueBox.style.opacity = "0";
                
                // Animate dialogue box
                fadeIn(dialogueBox);
                
                const aiResponse = await fetchGhostResponse();
                document.getElementById("ghost-dialogue").innerText = aiResponse;

                setTimeout(() => {
                    fadeOut(dialogueBox);
                }, 5000);

            } catch (error) {
                console.error("Ghost interaction failed:", error);
            }
        }

        // Animation helpers
        function fadeIn(element) {
            let opacity = 0;
            element.style.opacity = opacity;
            const timer = setInterval(() => {
                opacity += 0.1;
                element.style.opacity = opacity;
                if (opacity >= 1) clearInterval(timer);
            }, 50);
        }

        function fadeOut(element) {
            let opacity = 1;
            const timer = setInterval(() => {
                opacity -= 0.1;
                element.style.opacity = opacity;
                if (opacity <= 0) {
                    clearInterval(timer);
                    element.style.display = "none";
                }
            }, 50);
        }

        // Window resize handler
        window.addEventListener('resize', () => {
            if (player && player.setSize) {
                player.setSize(window.innerWidth, window.innerHeight);
            }
        });
    </script>
</body>
</html>
