<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="user-scalable=no, initial-scale=1.0, width=device-width, viewport-fit=cover">
    <title>Codename: Abandoned</title>

    <!-- Libraries -->
    <script src="lib/tdvplayer.js"></script>
    <script src="lib/ThreeWebGL.js"></script>
    <script src="script.js?v=1738683456665"></script>

    <style>
        /* Maintain your original button style */
        #wallet-button {
            margin-top: 20px;
            padding: 15px 40px;
            background: transparent;
            color: #fff;
            border: 2px solid #fff;
            border-radius: 30px;
            font-family: 'Courier New', monospace;
            font-size: 1.4em;
            font-weight: bold;
            cursor: pointer;
            text-transform: uppercase;
            letter-spacing: 2px;
            text-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
            transition: all 0.4s ease;
            z-index: 10000;
        }

        #wallet-button:hover {
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.4);
        }

        /* Fullscreen fixes */
        :fullscreen #viewer {
            width: 100% !important;
            height: 100% !important;
        }

        /* Panorama Viewer fixes */
        #viewer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
            background: #000;
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div id="preloadContainer">
        <img id="eyeAnimation" src="loading/HTMLImage_D852ACBA_C9D9_4C69_41C0_1FC9A930EF8A.gif" alt="Access Pending">
        <button id="wallet-button">Initialize Wallet Protocol</button>
    </div>

    <!-- Virtual Tour Viewer -->
    <div id="viewer"></div>

    <script>
        let player;
        let isInitialized = false;

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('wallet-button').onclick = handleWalletConnection;
        });

        async function handleWalletConnection() {
            try {
                // Check for any Ethereum provider
                const provider = await detectProvider();
                
                const accounts = await provider.request({ method: 'eth_requestAccounts' });
                await requestSignature(accounts[0]);
                
                initializeTour();
                fadeOutPreloader();

            } catch (error) {
                alert(`Connection Failed: ${error.message}`);
                console.error('Wallet Error:', error);
            }
        }

        async function detectProvider() {
            if (window.ethereum) return window.ethereum;
            
            // Basic WalletConnect fallback
            const connector = new WalletConnect({
                bridge: "https://bridge.walletconnect.org",
                qrcodeModal: QRCodeModal,
            });

            if (!connector.connected) {
                await connector.createSession();
            }

            return new Promise((resolve, reject) => {
                connector.on("connect", (error) => {
                    if (error) reject(error);
                    resolve(connector);
                });
            });
        }

        async function requestSignature(address) {
            const message = `Authorize Access - ${Date.now()}`;
            return window.ethereum.request({
                method: 'personal_sign',
                params: [message, address]
            });
        }

        function initializeTour() {
            if (isInitialized) return;
            
            try {
                const settings = new TDV.PlayerSettings();
                settings.set(TDV.PlayerSettings.CONTAINER, document.getElementById('viewer'));
                settings.set(TDV.PlayerSettings.SCRIPT_URL, 'script.js?v=1738683456665');
                settings.set(TDV.PlayerSettings.THREE_JS_WEBGL_URL, 'lib/ThreeWebGL.js');

                window.tdvplayer = player = TDV.PlayerAPI.create(settings);
                isInitialized = true;

                // Handle fullscreen properly
                player.bind('click', (event) => {
                    if (event.targetType === 'fullscreen') {
                        handle
