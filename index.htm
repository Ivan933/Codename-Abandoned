<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Keep existing meta tags and libraries -->
    <style>
        /* Fullscreen Loading Styles */
        #preloadContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: #000;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        #loadingImage {
            width: 80vmin;
            height: 80vmin;
            object-fit: contain;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        /* Wallet Button Styles */
        #wallet-button {
            position: absolute;
            bottom: 20%;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 30px;
            background: #f6851b;
            color: white;
            border: none;
            border-radius: 25px;
            font-family: 'Arial', sans-serif;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            z-index: 10000;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(246, 133, 27, 0.4);
        }

        #wallet-button:hover {
            background: #ff9500;
            transform: translateX(-50%) scale(1.05);
        }

        #wallet-button:active {
            transform: translateX(-50%) scale(0.95);
        }
    </style>
</head>
<body onload="onLoad()">
    <!-- Fullscreen Loading with Button -->
    <div id="preloadContainer">
        <img id="loadingImage" src="loading/HTMLImage_D852ACBA_C9D9_4C69_41C0_1FC9A930EF8A.gif" alt="Loading">
        <button id="wallet-button">Connect Wallet to Start</button>
    </div>

    <!-- Virtual Tour Viewer -->
    <div id="viewer"></div>

    <script>
        let player;
        let isInitialized = false;
        let isConnected = false;

        async function onLoad() {
            document.getElementById('wallet-button').onclick = handleWalletConnection;
        }

        async function handleWalletConnection() {
            try {
                // Try MetaMask first
                if (window.ethereum) {
                    await handleMetaMask();
                } else {
                    // Fallback to WalletConnect
                    await handleWalletConnect();
                }
                
                // Request signature after connection
                await requestSignature();
                
                // If successful, start tour
                if (!isInitialized) {
                    initializeTour();
                    isConnected = true;
                }
                
            } catch (error) {
                alert(`Connection failed: ${error.message}`);
                console.error(error);
            }
        }

        async function handleMetaMask() {
            const accounts = await window.ethereum.request({ 
                method: 'eth_requestAccounts' 
            });
            return accounts[0];
        }

        async function handleWalletConnect() {
            // Initialize WalletConnect here
            throw new Error('WalletConnect integration required');
        }

        async function requestSignature() {
            const message = "Sign to access the virtual tour";
            const address = await getWalletAddress();
            
            const signature = await window.ethereum.request({
                method: 'personal_sign',
                params: [message, address]
            });
            
            return signature;
        }

        async function getWalletAddress() {
            const accounts = await window.ethereum.request({ 
                method: 'eth_accounts' 
            });
            return accounts[0];
        }

        function initializeTour() {
            if (isInitialized) return;
            
            const settings = new TDV.PlayerSettings();
            settings.set(TDV.PlayerSettings.CONTAINER, document.getElementById('viewer'));
            settings.set(TDV.PlayerSettings.SCRIPT_URL, 'script.js?v=1738683456665');
            settings.set(TDV.PlayerSettings.THREE_JS_WEBGL_URL, 'lib/ThreeWebGL.js');
            
            window.tdvplayer = player = TDV.PlayerAPI.create(settings);
            isInitialized = true;

            player.bind('stateChange', function(event) {
                if (event.name === 'begin') {
                    document.getElementById('preloadContainer').style.display = 'none';
                }
            }, player, true);
        }
    </script>
</body>
</html>
