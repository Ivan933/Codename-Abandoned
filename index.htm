<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Virtual Tour</title>

    <!-- Add WalletConnect CDN -->
    <script src="https://cdn.jsdelivr.net/npm/@walletconnect/web3-provider@1.6.6/dist/umd/index.min.js"></script>

    <style>
        /* Existing styles for wallet info */
        #wallet-info {
            position: absolute;
            top: 20px;
            right: 20px;
            color: #fff;
            font-size: 14px;
            z-index: 1000;
        }

        /* Fullscreen preloader */
        #preloadContainer {
            display: flex;
            align-items: center;
            justify-content: center;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.7); /* Transparent dark background */
            z-index: 9999;
            flex-direction: column;
            gap: 20px;
        }

        /* Fullscreen loading gif */
        #preloadContainer img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain; /* Maintain aspect ratio */
        }

        /* Button styling */
        #wallet-button {
            font-size: 18px;
            font-family: Arial, sans-serif;
            padding: 12px 30px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        #wallet-button:hover {
            background-color: #0056b3;
        }

        /* Center the "Connect Wallet" button at the bottom of the preloader */
        .wallet-prompt {
            color: #fff;
            text-align: center;
            font-size: 1.2em;
            margin-bottom: 10px; /* Space between text and button */
        }
    </style>
</head>
<body onload="onLoad()">
    <!-- Preloader with wallet connection -->
    <div id="preloadContainer">
        <img src="loading/HTMLImage_D852ACBA_C9D9_4C69_41C0_1FC9A930EF8A.gif" alt="Loading...">
        <p class="wallet-prompt">Connect your wallet to access the virtual tour</p>
        <button id="wallet-button">Connect Wallet</button>
    </div>

    <!-- Virtual Tour Viewer -->
    <div id="viewer"></div>

    <script>
        let player;
        let isInitialized = false;
        let isWalletConnected = false;

        let provider;

        // Modified initialization flow
        function onLoad() {
            // Show the Connect Wallet button
            document.getElementById("wallet-button").onclick = connectWallet;
        }

        async function connectWallet() {
            // Check if MetaMask is available
            if (typeof window.ethereum !== "undefined") {
                // Use MetaMask
                provider = window.ethereum;
                try {
                    const accounts = await provider.request({
                        method: "eth_requestAccounts"
                    });
                    onWalletConnectSuccess(accounts);
                } catch (error) {
                    handleWalletError(error);
                }
            } else {
                // Fallback to WalletConnect if MetaMask is not available
                const walletConnectProvider = new WalletConnectProvider({
                    infuraId: "YOUR_INFURA_PROJECT_ID" // You need to use your own Infura project ID
                });

                provider = walletConnectProvider;

                try {
                    // Enable the provider (this opens a QR code for the user to scan with their mobile wallet)
                    await provider.enable();

                    // Use WalletConnect to get the accounts
                    const accounts = await provider.request({
                        method: "eth_requestAccounts"
                    });

                    onWalletConnectSuccess(accounts);
                } catch (error) {
                    handleWalletError(error);
                }
            }
        }

        // Handle successful wallet connection
        function onWalletConnectSuccess(accounts) {
            isWalletConnected = true;
            console.log("✅ Wallet Connected:", accounts[0]);

            // Show wallet info
            const walletInfo = document.createElement("div");
            walletInfo.id = "wallet-info";
            walletInfo.textContent = `Connected: ${accounts[0].substring(0, 6)}...`;
            document.body.appendChild(walletInfo);

            // Start the tour after connection
            initializeTour();
        }

        // Handle wallet connection errors
        function handleWalletError(error) {
            console.error("❌ Wallet Connection Failed:", error);

            // Improved error handling
            if (error.code === 4001) {
                // User rejected the connection request
                alert("Wallet connection request was rejected. Please try again.");
            } else if (error.code === -32002) {
                // Already waiting for user action (MetaMask pop-up is open)
                alert("A wallet connection request is already pending. Please approve it in your wallet.");
            } else {
                // General error
                alert("An error occurred while connecting your wallet. Please check your MetaMask or try again.");
            }
        }

        function initializeTour() {
            if (isInitialized) return;
            
            // Initialize tour
            const settings = new TDV.PlayerSettings();
            settings.set(TDV.PlayerSettings.CONTAINER, document.getElementById('viewer'));
            settings.set(TDV.PlayerSettings.SCRIPT_URL, 'script.js?v=1738683456665');
            settings.set(TDV.PlayerSettings.THREE_JS_WEBGL_URL, 'lib/ThreeWebGL.js');
            
            window.tdvplayer = player = TDV.PlayerAPI.create(settings);
            isInitialized = true;

            player.bind('stateChange', function(event) {
                if (event.name === 'begin') {
                    disposePreloader();
                }
            }, player, true);
        }

        function disposePreloader() {
            const preloadContainer = document.getElementById('preloadContainer');
            if (preloadContainer) {
                preloadContainer.style.opacity = "0";
                setTimeout(() => {
                    preloadContainer.style.display = "none";
                }, 500);
            }
        }
    </script>
</body>
</html>

