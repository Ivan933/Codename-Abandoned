<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="user-scalable=no, initial-scale=0.5, width=device-width, viewport-fit=cover">
    <title>Codename: Abandoned</title>

    <!-- Libraries -->
    <script src="lib/tdvplayer.js"></script>
    <script src="lib/ThreeWebGL.js"></script>
    <script src="script.js?v=1738683456665"></script>
    <script src="https://unpkg.com/@walletconnect/client"></script>
    <script src="https://unpkg.com/@walletconnect/qrcode-modal"></script>

    <style>
        /* Fullscreen Eye Loading Animation */
        #preloadContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: #000;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            z-index: 9999;
            transition: opacity 0.5s ease-out;
        }

        #eyeAnimation {
            width: 60vh;
            height: 60vh;
            object-fit: contain;
            filter: grayscale(100%);
            animation: eye-pulse 2s ease-in-out infinite;
        }

        /* Virtual Tour Viewer */
        #viewer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background: #000;
        }

        /* Fullscreen Mode Fix */
        .fullscreen {
            width: 100vw !important;
            height: 100vh !important;
        }

        @keyframes eye-pulse {
            0%, 100% { transform: scale(0.98); opacity: 0.9; }
            50% { transform: scale(1.02); opacity: 1; }
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div id="preloadContainer">
        <img id="eyeAnimation" src="loading/HTMLImage_D852ACBA_C9D9_4C69_41C0_1FC9A930EF8A.gif" alt="Access Pending">
        <button id="wallet-button">Initialize Wallet Protocol</button>
    </div>

    <!-- Virtual Tour Viewer -->
    <div id="viewer"></div>

    <script>
        let player;
        let isInitialized = false;

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('wallet-button').onclick = handleWalletConnection;
            document.addEventListener("fullscreenchange", handleFullScreenChange);
        });

        async function handleWalletConnection() {
            try {
                let provider;
                if (window.ethereum) {
                    provider = window.ethereum;
                } else {
                    provider = await setupWalletConnect();
                }

                if (!provider) {
                    throw new Error('No crypto wallet detected');
                }

                const accounts = await provider.request({ method: 'eth_requestAccounts' });
                await requestSignature(accounts[0]);

                if (!window.TDV) {
                    throw new Error('Virtual tour engine failed to load');
                }

                initializeTour();
                fadeOutPreloader();

            } catch (error) {
                alert(`Security Protocol Failed: ${error.message}`);
                console.error('Connection Error:', error);
            }
        }

        async function setupWalletConnect() {
            return new Promise((resolve, reject) => {
                const connector = new WalletConnect({
                    bridge: "https://bridge.walletconnect.org",
                    qrcodeModal: QRCodeModal,
                });

                if (!connector.connected) {
                    connector.createSession().then(() => {
                        connector.on("connect", (error, payload) => {
                            if (error) reject(error);
                            resolve(connector);
                        });
                    });
                } else {
                    resolve(connector);
                }
            });
        }

        async function requestSignature(address) {
            const message = `Authorize Virtual Access - ${Date.now()}`;
            return window.ethereum.request({
                method: 'personal_sign',
                params: [message, address]
            });
        }

        function initializeTour() {
            if (isInitialized) return;

            try {
                const settings = new TDV.PlayerSettings();
                settings.set(TDV.PlayerSettings.CONTAINER, document.getElementById('viewer'));
                settings.set(TDV.PlayerSettings.SCRIPT_URL, 'script.js?v=1738683456665');
                settings.set(TDV.PlayerSettings.THREE_JS_WEBGL_URL, 'lib/ThreeWebGL.js');

                window.tdvplayer = player = TDV.PlayerAPI.create(settings);
                isInitialized = true;

                player.bind('stateChange', (event) => {
                    if (event.name === 'begin') {
                        fadeOutPreloader();
                    }
                });

            } catch (error) {
                console.error('TDV Initialization Error:', error);
                alert('Virtual environment failed to initialize');
            }
        }

        function fadeOutPreloader() {
            const preloadContainer = document.getElementById('preloadContainer');
            if (preloadContainer) {
                preloadContainer.style.opacity = '0';
                setTimeout(() => {
                    preloadContainer.style.display = 'none';
                }, 500);
            }
        }

        function handleFullScreenChange() {
            const viewer = document.getElementById("viewer");
            if (document.fullscreenElement) {
                viewer.classList.add("fullscreen");
            } else {
                viewer.classList.remove("fullscreen");
            }
        }

        function goFullScreen() {
            const viewer = document.getElementById("viewer");
            if (viewer.requestFullscreen) {
                viewer.requestFullscreen();
            } else if (viewer.mozRequestFullScreen) { // Firefox
                viewer.mozRequestFullScreen();
            } else if (viewer.webkitRequestFullscreen) { // Chrome, Safari, and Opera
                viewer.webkitRequestFullscreen();
            } else if (viewer.msRequestFullscreen) { // IE/Edge
                viewer.msRequestFullscreen();
            }
        }
    </script>
</body>
</html>

